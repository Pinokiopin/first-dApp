# TodoList Smart Contract

## Описание
Этот смарт-контракт реализует систему управления задачами (Todo List) на платформе Ethereum. Пользователи могут добавлять, обновлять, удалять и отслеживать выполнение задач. Контракт также поддерживает добавление задач с оплатой.

## Особенности
- Добавление задач с оплатой и без.
- Обновление и удаление задач.
- Отслеживание статуса выполнения задач.
- Получение всех задач или нескольких задач по ID.
- Безопасная обработка ошибок и вводимых данных.

## Установка

### Предварительные требования
- Убедитесь, что у вас установлен [Node.js](https://nodejs.org/) (версия 12 и выше).
- Установите [Hardhat](https://hardhat.org/getting-started/#installation) для разработки смарт-контрактов.

### Клонирование репозитория
Сначала клонируйте репозиторий:
```bash
git clone <ваш-репозиторий-url>
cd <имя-репозитория>

-- Установите зависимости проекта:
npm install

Развертывание

### Локальная тестовая сеть

--Запустите локальную тестовую сеть Hardhat:
npx hardhat node

--Разверните контракт на тестовой сети:
npx hardhat run scripts/deploy.js --network localhost

### Развертывание на тестовой сети Ethereum

--Настройте конфигурацию сети в файле hardhat.config.js, добавив параметры для тестовой сети (например, Ropsten или Rinkeby).
--Добавьте ваши учетные данные в .env файл, если вы используете Infura или Alchemy.

### Тестирование
---Запустите тесты для проверки функциональности контракта:
npx hardhat test

### Использование
--Взаимодействие с контрактом
После развертывания контракта вы можете использовать его функции через интерфейс или скрипты. Вот основные функции, доступные в контракте:

addTask(string memory _content): Добавляет новую задачу.
addTaskWithPayment(string memory _content): Добавляет новую задачу с минимальной оплатой.
toggleCompleted(uint _id): Переключает статус выполнения задачи.
deleteTask(uint _id): Удаляет задачу.
updateTask(uint _id, string memory _newContent): Обновляет содержание задачи.
getTask(uint _id): Получает задачу по ID.
getMultipleTasks(uint[] memory _ids): Получает несколько задач по массиву ID.
getAllTasks(): Получает все существующие задачи.

### Документация
--Обработка ошибок
Контракт включает проверку входных данных и выбрасывает информативные сообщения об ошибках при попытке выполнить недопустимые действия.

--Безопасность
Контракт защищен от распространенных уязвимостей, таких как переполнение целого числа и атаки повторного входа. Также реализованы проверки доступа для администраторских функций.

--Лицензия
Этот проект лицензирован под MIT License - смотрите файл LICENSE для подробностей.

--Контрибьюция
Если вы хотите внести свой вклад в проект, пожалуйста, откройте запрос на внесение изменений (pull request) или создайте issue с предложениями.

###Авторы
--Assylbek Abdukarimov
--Sanzhar Baltabekov